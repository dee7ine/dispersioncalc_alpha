from dataclasses import dataclass
from math import tan
#from numba import jit
import matplotlib.pyplot as plt
import scipy
from scipy import optimize
from Decorators import timeit
#from numerical_methods.wave_class import Wave
import numpy as np
from numerical_methods.Plot_utilities import add_plot, add_cutoff_freqs, add_velocities
from numerical_methods.Utilities import find_max

@dataclass
class LambWave:

    def __init__(self, thickness, nmodes_sym, nmodes_antisym, fd_max, vp_max,
                 c_L, c_S, c_R=None, fd_points=100, vp_step=100,
                 material='default'):
        """"
        Parameters
        ----------
        thickness : float or int
            Thickness of the plate, in mm.
        nmodes_sym : int
            Number of symmetric modes to calculate.
        nmodes_antisym : int
            Number of antisymmetric modes to calculate.
        fd_max : float or int
            Maximum value of frequency × thickness to calculate.
        vp_max : float or int
            Maximum value of phase velocity to calculate, in m/s.
        c_L : float or int
            Longitudinal wave velocity of the material, in m/s.
        c_S: float or int
            Shear wave velocity of the material, in m/s.
        c_R: float or int, optional
            Rayleigh wave velocity of the material, in m/s.
        fd_points : int, optional
            Number of frequency × thickness points.
        vp_step : int, optional
            Increment between phase velocity intervals.
        material : str, optional
            Name of the material being analyzed.

        """

        self._d = thickness / 1e3
        self._h = (thickness / 2) / 1e3
        self.nmodes_sym = nmodes_sym
        self.nmodes_antisym = nmodes_antisym
        self.fd_max = fd_max
        self.vp_max = vp_max
        self._c_L = c_L
        self._c_S = c_S
        self._c_R = c_R
        self.fd_points = fd_points
        self.vp_step = vp_step
        self.material = material

        # Solve the dispersion equations.

        symmetric = self._solve_equation(function=self._calculate_symmetric,
                                         nmodes=nmodes_sym,
                                         c=self._c_S,
                                         label='S')

        antisymmetric = self._solve_equation(function=self._calculate_antisymmetric,
                                             nmodes=nmodes_antisym,
                                             c=self._c_L,
                                             label='A')

        # Calculate group velocity (vg) and wavenumber (k) from phase
        # velocity (vp) and interpolate all results.

        self.vp_sym, self.vg_sym, self.k_sym = self._interpolate(symmetric, self._d)
        self.vp_antisym, self.vg_antisym, self.k_antisym = self._interpolate(antisymmetric,
                                                                       self._d)

    @timeit
    def _calculate_constants(self, vp: float, fd: float) -> float:
        """

        :param vp: phase velocity
        :param fd: frequency-thickness product
        :return:
        """

        omega = 2 * np.pi * (fd / self._d)

        k = omega / vp

        p = np.sqrt(((omega / self._c_L) ** 2 - k ** 2), dtype = np.complex128)
        q = np.sqrt(((omega / self._c_S) ** 2 - k ** 2), dtype = np.complex128)

        return k, p, q
    @timeit
    def _calculate_symmetric(self,
                   vd: float,
                   fd: float) -> float:

        """
        :param self:
        :param vd:
        :param fd:
        :return:
        """

        k, p, q = self._calculate_constants(vd, fd)

        symmetric = (np.tan(q * self._h) / q + 4 * k**2 * p * tan(p * self._h) / (q ** 2 - k** 2))


        print(np.real(symmetric))
        return np.real(symmetric)

    def _calculate_antisymmetric(self,
                                 vp: float,
                                 fd: float) -> list:
        """

        :param self:
        :param vp:
        :param fd:
        :return:
        """

        k, p, q = self._calculate_constants(vp, fd)
        antisymmetric = (q * np.tan(q * self._h) / q + (q ** 2 - k ** 2) * np.tan(p * self._h) / 4 * k ** 2 * p)
        print(np.real(antisymmetric))
        return np.real(antisymmetric)

    def _interpolate(self, result, d, type='cubic'):
        """

        :param d:
        :param type:
        :return:

        Interpolate the results for phase velocity, group velocity and
        wave number.

        Parameters
        ----------
        result : dict
            Dictionary with the phase velocity values obtained by solving
            the dispersion equations.
        kind : str, optional
            Specifies the kind of interpolation as a string. Can be
            ‘linear’, ‘nearest’, ‘zero’, ‘slinear’, ‘quadratic’, ‘cubic’,
            ‘previous’, ‘next’. Defaults to 'cubic'.

        Returns
        -------
        interp_vp : dict
            Dictionary with phase velocity interpolator at each mode.
        interp_vg : dict
            Dictionary with group velocity interpolator at each mode.
        interp_k : dict
            Dictionary with wave number interpolator at each mode.

        """

        interp_vp = {}
        interp_vg = {}
        interp_k = {}

        for mode, arr in result.items():

            if arr[1].size > 3:
                fd = arr[0]
                vp = arr[1]

                interp_vp[mode] = scipy.interpolate.interp1d(fd, vp, kind = type)

                k = (fd * 2 * np.pi / d) / vp

                interp_k[mode] = scipy.interpolate.interp1d(fd, k, kind = type)

                """
                Find the derivative of phase velocity using a
                interpolating spline.
                """

                univ_s = scipy.interpolate.InterpolatedUnivariateSpline(fd, vp)
                vp_prime = univ_s.derivative()

                vg = np.square(vp) * (1 / (vp - vp_prime(fd) * fd))

                interp_vg[mode] = scipy.interpolate.interp1d(fd, vg, kind = type)

        return interp_vp, interp_vg, interp_k

    def correct_instability(self, result, function):
        """

        :param result:
        :param function:
        :return:
        """

        """A function to correct the instability produced when two roots are
        in close proximity, making the function change sign twice or more in
        the phase velocity interval under analysis. Since these values of
        phase velocity are not computed, it ultimately produces a wrong mode
        assignation, e.g., a phase velocity value corresponding to the S1
        mode is wrongly assigned to S0.

        Since phase velocity is strictly decreasing for each mode order
        (except for A0), the function works by looping through each mode,
        detecting if a phase velocity value is not decreasing. If this is
        the case, the value is appended to the next mode, and replaced by 0.

        Parameters
        ----------
        result : array
            An array of shape (fd_points, nmodes+1), where the first column
            contains the fd values and the following columns are the phase
            velocity values for the requested modes (S0, S1, S2, etc., or
            A0, A1, A2, etc.)
        function : object
            Family of modes to solve (symmetric or antisymmetric).

        Returns
        -------
        corrected_result : array
            The corrected result array.

        """

        # Compensate for antisymmetric mode (A0 is strictly increasing).

        n = 1 if function.__name__ == '_symmetric' else 2
        nmodes = result.shape[1] - 1

        corrected_result = np.copy(result)

        for idx, col in enumerate(corrected_result.T[n:, :]):
            if np.any(col):
                i = 0
                while col[i] == 0 and i < len(col) - 1:
                    i += 1
                if idx < nmodes - n:
                    corrected_result[i][idx + n + 1] = 0

        for idx, col in enumerate(corrected_result.T[n:, :]):
            for i in range(len(col) - 1):
                if i == len(col) - 2:
                    corrected_result[i + 1][idx + n] = 0
                if col[i] != 0:
                    j = i + 1
                    if col[j] == 0:
                        while col[j] == 0 and j < len(col) - 1:
                            j += 1
                    if j < len(col) - 1:
                        if col[i] < col[j] or col[j] == 0:
                            while (col[i] < col[j] or col[j] == 0) and j < len(col) - 1:
                                if col[j] == 0:
                                    j += 1
                                else:
                                    for idx2 in range(nmodes):
                                        if idx == idx2:
                                            corrected_result[j][idx + n] = 0
                                            p = n + 1
                                            while p <= nmodes - idx2:
                                                corrected_result[j][idx + p] = result[j][idx + p - 1]
                                                p += 1
                                    j += 1

        return corrected_result

    def _solve_equation(self, function, nmodes, c, label):
        """Function to calculate the numerical solution to the
        dispersion equations.

        The algorithm works as follows:

            1) Fix a value of frequency × thickness product.
            2) Evaluate the function at two values of phase velocity
               (vp and vp+step) and check their signs.
            3) Since the function is continuous, if the sign changes
               in the interval under analysis, a root exists in this
               interval. Use the bisection method to locate it
               precisely.
            4) Continue searching for other roots at this value of
               frequency × thickness.
            5) Change the value of frequency × thickness and repeat
               steps 2 to 4.

        Parameters
        ----------
        function : {self._symmetric, self._antisymmetric}
            Family of modes to solve. Can be `self._symmetric` (to solve
            symmetric modes) or `self._antisymmetric` (to solve
            antisymmetric modes).

        Returns
        -------
        result_dict : dict
            A dictionary, where the keys are the corresponding mode
            (e.g., 'A0', 'A1', 'A2', ..., 'An' for antisymmetric modes
             or 'S0', 'S1', 'S2', ..., 'Sn' for symmetric modes) and the
            values are numpy arrays of dimensions (2, fd_points), where
            the first row has the fd values and the second row has the
            phase velocity values calculated.

        """

        fd_arr = np.linspace(0, self.fd_max, self.fd_points)
        result = np.zeros((len(fd_arr), nmodes + 1))

        print(f'\nCalculating {function.__name__[1:]} modes..\n')

        for i, fd in enumerate(fd_arr):

            print(f'{i}/{self.fd_points} - {np.around(fd, 1)} kHz × mm')

            result[i][0] = fd

            j = 1

            vp_1 = 0
            vp_2 = self.vp_step

            while vp_2 < self.vp_max:
                x_1 = function(vp_1, fd)
                x_2 = function(vp_2, fd)

                if j < nmodes + 1:
                    if not np.isnan(x_1) and not np.isnan(x_2):
                        if np.sign(x_1) != np.sign(x_2):
                            bisection = scipy.optimize.bisect(f=function,
                                                              a=vp_1,
                                                              b=vp_2,
                                                              args=(fd,))

                            # TO FIX: I don't know why at some points
                            # the function changes sign, but the roots
                            # found by the bisect method don't evaluate
                            # to zero.

                            # For now, these values are ignored (only
                            # take into account those values that
                            # evaluate to 0.01 or less).

                            if (np.abs(function(bisection, fd)) < 1e-2 and not
                            np.isclose(bisection, c)):
                                result[i][j] = bisection
                                j += 1

                vp_1 = vp_2
                vp_2 = vp_2 + self.vp_step

        # Correct some instabilities and replace zeros with NaN, so it
        # is easier to filter.

        result = self.correct_instability(result, function)
        result[result == 0] = np.nan

        result_dict = {}

        for nmode in range(nmodes):
            # Filter all NaN values.

            mode_result = np.vstack((result[:, 0], result[:, nmode + 1]))
            mode_result = mode_result[:, ~np.isnan(mode_result).any(axis=0)]

            # Append to a dictionary with keys 'An' or 'Sn'.

            result_dict[label + str(nmode)] = mode_result

        return result_dict

    def plot(self, ax, result, y_max, cutoff_frequencies=False,
             arrow_dir=None, material_velocities=False, plt_kwargs={}):
        """Generate a dispersion plot for a family of modes (symmetric
        or antisymmetric).

        Parameters
        ----------
        ax : axes
            Matplotlib axes in which the plot will be added.
        result : dict
            A dictionary with a result (vp, vg or k) interpolator at
            each mode.
        y_max : float or int
            Maximum y value in the plot.
        cutoff_frequencies : bool, optional
            Set to True to add cutoff frequencies to the plot.
        arrow_dir : {'up', 'down'}, optional
            Set arrows direction of cutoff frequencies. Can be 'up' (for
            group velocity plots) or 'down' (for phase velocity plots).
        material_velocities : bool, optional
            Add material velocities (longitudinal, shear and Rayleigh)
            to the plot. Defaults to True.
        plt_kwargs : dict, optional
            Matplotlib kwargs (to change color, linewidth, linestyle,
            etc.).

        """

        for mode, arr in result.items():

            # Generate an fd array for each mode and add the
            # corresponding mode plot.

            fd = np.arange(np.amin(arr.x), np.amax(arr.x), 0.1)
            add_plot(ax, result, mode, fd, **plt_kwargs)

            if cutoff_frequencies:
                add_cutoff_freqs(ax, mode, arrow_dir, y_max,
                                 self._c_L, self._c_S)

        if material_velocities:
            add_velocities(ax, self._c_L, self._c_S, self._c_R, self.fd_max)

        ax.set_xlim([0, self.fd_max])
        ax.set_ylim([0, y_max])

        ax.set_xlabel('Frequency × thickness [KHz × mm]')

    def plot_phase_velocity(self, modes='both', cutoff_frequencies=True,
                            material_velocities=True, save_img=False,
                            sym_style={'color': 'blue'},
                            antisym_style={'color': 'red', 'linestyle': '--'}):
        """Generate a plot of phase velocity as a function of frequency
        × thickness.

        Parameters
        ----------
        modes : {'both', 'symmetric', 'antisymmetric'}, optional
            Which family of modes to plot. Can be 'symmetric',
            'antisymmetric' or 'both'. Defaults to 'both'.
        cutoff_frequencies : bool, optional
            Add cutoff frequencies to the plot. Defaults to True.
        material_velocities : bool, optional
            Add material velocities (longitudinal, shear and Rayleigh)
            to the plot. Defaults to True.
        save_img : bool, optional
            Save the result image as png. Defaults to False.
        sym_style : dict, optional
            A dictionary with matplotlib kwargs to modify the symmetric
            curves (to change color, linewidth, linestyle, etc.).
        antisym_style : dict, optional
            A dictionary with matplotlib kwargs to modify the
            antisymmetric curves (to change color, linewidth, linestyle,
            etc.).

        Returns
        -------
        fig, ax : matplotlib objects
            The figure and the axes of the generated plot.

        """

        fig, ax = plt.subplots(figsize=(7, 4))
        fig.canvas.set_window_title('Phase Velocity')

        # Calculate the maximum value to scale the ylim of the axes.

        max_sym, max_antisym = find_max(self.vp_sym), find_max(self.vp_antisym)

        if modes == 'symmetric':
            self.plot(ax, self.vp_sym, max_sym, cutoff_frequencies, 'down',
                      material_velocities, plt_kwargs=sym_style)
        elif modes == 'antisymmetric':
            self.plot(ax, self.vp_antisym, max_antisym, cutoff_frequencies,
                      'down', material_velocities, plt_kwargs=antisym_style)
        elif modes == 'both':
            max_ = max(max_sym, max_antisym)
            self.plot(ax, self.vp_sym, max_, cutoff_frequencies,
                      'down', material_velocities, plt_kwargs=sym_style)
            self.plot(ax, self.vp_antisym, max_, cutoff_frequencies,
                      'down', material_velocities, plt_kwargs=antisym_style)
        else:
            raise Exception('modes must be "symmetric", "antisymmetric"'
                            'or "both".')

        ax.legend(loc='lower right')
        ax.set_ylabel('Phase Velocity [m/s]')

        if save_img:
            fig.savefig(f'results/Phase Velocity - {self._d * 1e3} mm '
                        f'{self.material} plate.png',
                        bbox_inches='tight')

        return fig, ax

    def plot_group_velocity(self, modes='both', cutoff_frequencies=True,
                            save_img=False, sym_style={'color': 'blue'},
                            antisym_style={'color': 'red', 'linestyle': '--'}):
        """Generate a plot of group velocity as a function of frequency
        × thickness.

        Parameters
        ----------
        modes : {'both', 'symmetric', 'antisymmetric'}, optional
            Which family of modes to plot. Can be 'symmetric',
            'antisymmetric' or 'both'. Defaults to 'both'.
        cutoff_frequencies : bool, optional
            Add cutoff frequencies to the plot. Defaults to True.
        save_img : bool, optional
            Save the result image as png. Defaults to False.
        sym_style : dict, optional
            A dictionary with matplotlib kwargs to modify the symmetric
            curves (to change color, linewidth, linestyle, etc.).
        antisym_style : dict, optional
            A dictionary with matplotlib kwargs to modify the
            antisymmetric curves (to change color, linewidth, linestyle,
            etc.).

        Returns
        -------
        fig, ax : matplotlib objects
            The figure and the axes of the generated plot.

        """

        fig, ax = plt.subplots(figsize=(7, 4))
        fig.canvas.set_window_title('Group Velocity')

        # Calculate the maximum value to scale the ylim of the axes.

        max_sym, max_antisym = find_max(self.vg_sym), find_max(self.vg_antisym)

        if modes == 'symmetric':
            self.plot(ax, self.vg_sym, max_sym, cutoff_frequencies,
                      'up', plt_kwargs=sym_style)
        elif modes == 'antisymmetric':
            self.plot(ax, self.vg_antisym, max_antisym, cutoff_frequencies,
                      'up', plt_kwargs=antisym_style)
        elif modes == 'both':
            max_ = max(max_sym, max_antisym)
            self.plot(ax, self.vg_sym, max_, cutoff_frequencies,
                      'up', plt_kwargs=sym_style)
            self.plot(ax, self.vg_antisym, max_, cutoff_frequencies,
                      'up', plt_kwargs=antisym_style)
        else:
            raise Exception('modes must be "symmetric", "antisymmetric"'
                            'or "both".')

        ax.legend(loc='lower right')
        ax.set_ylabel('Group Velocity [m/s]')

        if save_img:
            fig.savefig(f'results/Group Velocity - {self._d * 1e3} mm '
                        f'{self.material} plate.png',
                        bbox_inches='tight')

        return fig, ax

    def plot_wave_number(self, modes='both', save_img=False,
                         sym_style={'color': 'blue'},
                         antisym_style={'color': 'red', 'linestyle': '--'}):
        """Generate a plot of wavenumber as a function of frequency ×
        thickness.

        Parameters
        ----------
        modes : {'both', 'symmetric', 'antisymmetric'}, optional
            Which family of modes to plot. Can be 'symmetric',
            'antisymmetric' or 'both'. Defaults to 'both'.
        save_img : bool, optional
            Save the result image as png. Defaults to False.
        sym_style : dict, optional
            A dictionary with matplotlib kwargs to modify the symmetric
            curves (to change color, linewidth, linestyle, etc.).
        antisym_style : dict, optional
            A dictionary with matplotlib kwargs to modify the
            antisymmetric curves (to change color, linewidth, linestyle,
            etc.).

        Returns
        -------
        fig, ax : matplotlib objects
            The figure and the axes of the generated plot.

        """

        fig, ax = plt.subplots(figsize=(7, 4))
        fig.canvas.set_window_title('Wave Number')

        # Calculate the maximum value to scale the ylim of the axes.

        max_sym, max_antisym = find_max(self.k_sym), find_max(self.k_antisym)

        if modes == 'symmetric':
            self.plot(ax, self.k_sym, max_sym, plt_kwargs=sym_style)
        elif modes == 'antisymmetric':
            self.plot(ax, self.k_antisym, max_antisym, plt_kwargs=antisym_style)
        elif modes == 'both':
            max_ = max(max_sym, max_antisym)
            self.plot(ax, self.k_sym, max_, plt_kwargs=sym_style)
            self.plot(ax, self.k_antisym, max_, plt_kwargs=antisym_style)
        else:
            raise Exception('modes must be "symmetric", "antisymmetric"'
                            'or "both".')

        ax.legend(loc='upper left')
        ax.set_ylabel('Wave Number [1/m]')

        if save_img:
            fig.savefig(f'results/Wave Number - {self.d * 1e3} mm '
                        f'{self.material} plate.png',
                        bbox_inches='tight')

        return fig, ax
@timeit
def main():
    E = 68.9e9  # E = Young's modulus, in Pa.
    p = 2700  # p = Density (rho), in kg/m3.
    v = 0.33  # v = Poisson's ratio (nu).

    """
    c_L: longitudinal wave velocity of the material
    c_S: shear wave velocity of the material
    c_R: Rayleigh weave velocity of the material
    """
    c_L = np.sqrt(E * (1 - v) / (p * (1 + v) * (1 - 2 * v)))
    c_S = np.sqrt(E / (2 * p * (1 + v)))
    c_R = c_S * ((0.862 + 1.14 * v) / (1 + v))

    # Example: A 10 mm aluminum plate.

    alum = LambWave(thickness=10,
                nmodes_sym=5,
                nmodes_antisym=5,
                fd_max=10000,
                vp_max=15000,
                c_L=c_L,
                c_S=c_S,
                c_R=c_R,
                material='Default')

    # Plot phase velocity, group velocity and wavenumber.

    alum.plot_phase_velocity()
    alum.plot_group_velocity()
    alum.plot_wave_number()

    # Plot wave structure (displacement profiles across thickness) for A0
    # and S0 modes at different fd values.

    # alum.plot_wave_structure(mode='A0', nrows=3, ncols=2,
    # fd=[500,1000,1500,2000,2500,3000])

    # alum.plot_wave_structure(mode='S0', nrows=4, ncols=2,
    # fd=[500,1000,1500,2000,2500,3000,3500,4000])

    # Generate animations for A0 and S0 modes at 1000 kHz mm.

    # alum.animate_displacement(mode='S0', fd=1000)
    # alum.animate_displacement(mode='A0', fd=1000)

    # Save all results to a txt file.

    # alum.save_results()

    plt.show()


if __name__ == "__main__":
    main()